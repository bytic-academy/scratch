name: packager

on:
  workflow_dispatch:
    inputs:
      USER_ID:
        type: string
        required: true
        description: USER_ID
      APP_ID:
        type: string
        required: true
        description: APP_ID
      APP_NAME:
        type: string
        required: true
        description: APP_NAME
      FILES_URL:
        type: string
        required: true
        description: FILES_URL
      KEYSTORE_PASS:
        type: string
        required: true
        description: KEYSTORE_PASS
      OUTPUT_PATH:
        type: string
        required: false
        description: OUTPUT_PATH
      CALLBACK_URL:
        type: string
        required: true
        description: CALLBACK_URL

jobs:
  build:
    runs-on: ubuntu-latest

    concurrency:
      group: build-${{ github.event.inputs.USER_ID }}
      cancel-in-progress: false

    container:
      image: arashdev/bytic-scratch-packager:latest
      credentials:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    steps:
      - name: Cache Docker image
        uses: actions/cache@v4
        id: docker-cache
        with:
          path: /tmp/docker-cache
          key: docker-${{ runner.os }}-${{ hashFiles('.github/workflows/packager.yml') }}
          
      - name: Load Docker image from cache if available
        if: steps.docker-cache.outputs.cache-hit == 'true'
        run: |
          docker load -i /tmp/docker-cache/bytic-scratch-packager.tar

      - name: Pull Docker image (if not cached)
        if: steps.docker-cache.outputs.cache-hit != 'true'
        run: |
          docker pull arashdev/bytic-scratch-packager:latest
          mkdir -p /tmp/docker-cache
          docker save arashdev/bytic-scratch-packager:latest -o /tmp/docker-cache/bytic-scratch-packager.tar

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build App
        timeout-minutes: 2
        working-directory: /app
        run: |
          pnpm --filter @acme/packager build:app
        env:
          APP_ID: ${{ github.event.inputs.APP_ID }}
          APP_NAME: ${{ github.event.inputs.APP_NAME }}
          FILES_URL: ${{ github.event.inputs.FILES_URL }}
          KEYSTORE_PASS: ${{ github.event.inputs.KEYSTORE_PASS }}
          OUTPUT_PATH: ${{ github.event.inputs.OUTPUT_PATH }}
          CALLBACK_URL: ${{ github.event.inputs.CALLBACK_URL }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BLOB_READ_WRITE_TOKEN: ${{ secrets.BLOB_READ_WRITE_TOKEN }}

      - name: Notify callback if build failed
        if: ${{ failure() }} # Runs if any previous step failed (including timeout)
        run: |
          if [ -n "${{ github.event.inputs.CALLBACK_URL }}" ]; then
            curl -X GET "${{ github.event.inputs.CALLBACK_URL }}?status=failed" -H "Authorization: Basic ${{ secrets.ACCESS_TOKEN }}"
          fi
