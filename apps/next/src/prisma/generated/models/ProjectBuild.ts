
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `ProjectBuild` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model ProjectBuild
 * 
 */
export type ProjectBuildModel = runtime.Types.Result.DefaultSelection<Prisma.$ProjectBuildPayload>

export type AggregateProjectBuild = {
  _count: ProjectBuildCountAggregateOutputType | null
  _min: ProjectBuildMinAggregateOutputType | null
  _max: ProjectBuildMaxAggregateOutputType | null
}

export type ProjectBuildMinAggregateOutputType = {
  id: string | null
  status: $Enums.ProjectBuildStatus | null
  projectId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectBuildMaxAggregateOutputType = {
  id: string | null
  status: $Enums.ProjectBuildStatus | null
  projectId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProjectBuildCountAggregateOutputType = {
  id: number
  status: number
  projectId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProjectBuildMinAggregateInputType = {
  id?: true
  status?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectBuildMaxAggregateInputType = {
  id?: true
  status?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProjectBuildCountAggregateInputType = {
  id?: true
  status?: true
  projectId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProjectBuildAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectBuild to aggregate.
   */
  where?: Prisma.ProjectBuildWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectBuilds to fetch.
   */
  orderBy?: Prisma.ProjectBuildOrderByWithRelationInput | Prisma.ProjectBuildOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProjectBuildWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectBuilds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectBuilds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned ProjectBuilds
  **/
  _count?: true | ProjectBuildCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProjectBuildMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProjectBuildMaxAggregateInputType
}

export type GetProjectBuildAggregateType<T extends ProjectBuildAggregateArgs> = {
      [P in keyof T & keyof AggregateProjectBuild]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProjectBuild[P]>
    : Prisma.GetScalarType<T[P], AggregateProjectBuild[P]>
}




export type ProjectBuildGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProjectBuildWhereInput
  orderBy?: Prisma.ProjectBuildOrderByWithAggregationInput | Prisma.ProjectBuildOrderByWithAggregationInput[]
  by: Prisma.ProjectBuildScalarFieldEnum[] | Prisma.ProjectBuildScalarFieldEnum
  having?: Prisma.ProjectBuildScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProjectBuildCountAggregateInputType | true
  _min?: ProjectBuildMinAggregateInputType
  _max?: ProjectBuildMaxAggregateInputType
}

export type ProjectBuildGroupByOutputType = {
  id: string
  status: $Enums.ProjectBuildStatus
  projectId: string
  createdAt: Date
  updatedAt: Date
  _count: ProjectBuildCountAggregateOutputType | null
  _min: ProjectBuildMinAggregateOutputType | null
  _max: ProjectBuildMaxAggregateOutputType | null
}

type GetProjectBuildGroupByPayload<T extends ProjectBuildGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProjectBuildGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProjectBuildGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProjectBuildGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProjectBuildGroupByOutputType[P]>
      }
    >
  >



export type ProjectBuildWhereInput = {
  AND?: Prisma.ProjectBuildWhereInput | Prisma.ProjectBuildWhereInput[]
  OR?: Prisma.ProjectBuildWhereInput[]
  NOT?: Prisma.ProjectBuildWhereInput | Prisma.ProjectBuildWhereInput[]
  id?: Prisma.StringFilter<"ProjectBuild"> | string
  status?: Prisma.EnumProjectBuildStatusFilter<"ProjectBuild"> | $Enums.ProjectBuildStatus
  projectId?: Prisma.StringFilter<"ProjectBuild"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectBuild"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectBuild"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}

export type ProjectBuildOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  project?: Prisma.ProjectOrderByWithRelationInput
}

export type ProjectBuildWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.ProjectBuildWhereInput | Prisma.ProjectBuildWhereInput[]
  OR?: Prisma.ProjectBuildWhereInput[]
  NOT?: Prisma.ProjectBuildWhereInput | Prisma.ProjectBuildWhereInput[]
  status?: Prisma.EnumProjectBuildStatusFilter<"ProjectBuild"> | $Enums.ProjectBuildStatus
  projectId?: Prisma.StringFilter<"ProjectBuild"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectBuild"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectBuild"> | Date | string
  project?: Prisma.XOR<Prisma.ProjectScalarRelationFilter, Prisma.ProjectWhereInput>
}, "id">

export type ProjectBuildOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProjectBuildCountOrderByAggregateInput
  _max?: Prisma.ProjectBuildMaxOrderByAggregateInput
  _min?: Prisma.ProjectBuildMinOrderByAggregateInput
}

export type ProjectBuildScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProjectBuildScalarWhereWithAggregatesInput | Prisma.ProjectBuildScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProjectBuildScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProjectBuildScalarWhereWithAggregatesInput | Prisma.ProjectBuildScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"ProjectBuild"> | string
  status?: Prisma.EnumProjectBuildStatusWithAggregatesFilter<"ProjectBuild"> | $Enums.ProjectBuildStatus
  projectId?: Prisma.StringWithAggregatesFilter<"ProjectBuild"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"ProjectBuild"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"ProjectBuild"> | Date | string
}

export type ProjectBuildCreateInput = {
  id?: string
  status: $Enums.ProjectBuildStatus
  createdAt?: Date | string
  updatedAt?: Date | string
  project: Prisma.ProjectCreateNestedOneWithoutBuildsInput
}

export type ProjectBuildUncheckedCreateInput = {
  id?: string
  status: $Enums.ProjectBuildStatus
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectBuildUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProjectBuildStatusFieldUpdateOperationsInput | $Enums.ProjectBuildStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  project?: Prisma.ProjectUpdateOneRequiredWithoutBuildsNestedInput
}

export type ProjectBuildUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProjectBuildStatusFieldUpdateOperationsInput | $Enums.ProjectBuildStatus
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectBuildCreateManyInput = {
  id?: string
  status: $Enums.ProjectBuildStatus
  projectId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectBuildUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProjectBuildStatusFieldUpdateOperationsInput | $Enums.ProjectBuildStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectBuildUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProjectBuildStatusFieldUpdateOperationsInput | $Enums.ProjectBuildStatus
  projectId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectBuildListRelationFilter = {
  every?: Prisma.ProjectBuildWhereInput
  some?: Prisma.ProjectBuildWhereInput
  none?: Prisma.ProjectBuildWhereInput
}

export type ProjectBuildOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProjectBuildCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectBuildMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectBuildMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  status?: Prisma.SortOrder
  projectId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProjectBuildCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectBuildCreateWithoutProjectInput, Prisma.ProjectBuildUncheckedCreateWithoutProjectInput> | Prisma.ProjectBuildCreateWithoutProjectInput[] | Prisma.ProjectBuildUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectBuildCreateOrConnectWithoutProjectInput | Prisma.ProjectBuildCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectBuildCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
}

export type ProjectBuildUncheckedCreateNestedManyWithoutProjectInput = {
  create?: Prisma.XOR<Prisma.ProjectBuildCreateWithoutProjectInput, Prisma.ProjectBuildUncheckedCreateWithoutProjectInput> | Prisma.ProjectBuildCreateWithoutProjectInput[] | Prisma.ProjectBuildUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectBuildCreateOrConnectWithoutProjectInput | Prisma.ProjectBuildCreateOrConnectWithoutProjectInput[]
  createMany?: Prisma.ProjectBuildCreateManyProjectInputEnvelope
  connect?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
}

export type ProjectBuildUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectBuildCreateWithoutProjectInput, Prisma.ProjectBuildUncheckedCreateWithoutProjectInput> | Prisma.ProjectBuildCreateWithoutProjectInput[] | Prisma.ProjectBuildUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectBuildCreateOrConnectWithoutProjectInput | Prisma.ProjectBuildCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectBuildUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectBuildUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectBuildCreateManyProjectInputEnvelope
  set?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
  disconnect?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
  delete?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
  connect?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
  update?: Prisma.ProjectBuildUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectBuildUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectBuildUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectBuildUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectBuildScalarWhereInput | Prisma.ProjectBuildScalarWhereInput[]
}

export type ProjectBuildUncheckedUpdateManyWithoutProjectNestedInput = {
  create?: Prisma.XOR<Prisma.ProjectBuildCreateWithoutProjectInput, Prisma.ProjectBuildUncheckedCreateWithoutProjectInput> | Prisma.ProjectBuildCreateWithoutProjectInput[] | Prisma.ProjectBuildUncheckedCreateWithoutProjectInput[]
  connectOrCreate?: Prisma.ProjectBuildCreateOrConnectWithoutProjectInput | Prisma.ProjectBuildCreateOrConnectWithoutProjectInput[]
  upsert?: Prisma.ProjectBuildUpsertWithWhereUniqueWithoutProjectInput | Prisma.ProjectBuildUpsertWithWhereUniqueWithoutProjectInput[]
  createMany?: Prisma.ProjectBuildCreateManyProjectInputEnvelope
  set?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
  disconnect?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
  delete?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
  connect?: Prisma.ProjectBuildWhereUniqueInput | Prisma.ProjectBuildWhereUniqueInput[]
  update?: Prisma.ProjectBuildUpdateWithWhereUniqueWithoutProjectInput | Prisma.ProjectBuildUpdateWithWhereUniqueWithoutProjectInput[]
  updateMany?: Prisma.ProjectBuildUpdateManyWithWhereWithoutProjectInput | Prisma.ProjectBuildUpdateManyWithWhereWithoutProjectInput[]
  deleteMany?: Prisma.ProjectBuildScalarWhereInput | Prisma.ProjectBuildScalarWhereInput[]
}

export type EnumProjectBuildStatusFieldUpdateOperationsInput = {
  set?: $Enums.ProjectBuildStatus
}

export type ProjectBuildCreateWithoutProjectInput = {
  id?: string
  status: $Enums.ProjectBuildStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectBuildUncheckedCreateWithoutProjectInput = {
  id?: string
  status: $Enums.ProjectBuildStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectBuildCreateOrConnectWithoutProjectInput = {
  where: Prisma.ProjectBuildWhereUniqueInput
  create: Prisma.XOR<Prisma.ProjectBuildCreateWithoutProjectInput, Prisma.ProjectBuildUncheckedCreateWithoutProjectInput>
}

export type ProjectBuildCreateManyProjectInputEnvelope = {
  data: Prisma.ProjectBuildCreateManyProjectInput | Prisma.ProjectBuildCreateManyProjectInput[]
  skipDuplicates?: boolean
}

export type ProjectBuildUpsertWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectBuildWhereUniqueInput
  update: Prisma.XOR<Prisma.ProjectBuildUpdateWithoutProjectInput, Prisma.ProjectBuildUncheckedUpdateWithoutProjectInput>
  create: Prisma.XOR<Prisma.ProjectBuildCreateWithoutProjectInput, Prisma.ProjectBuildUncheckedCreateWithoutProjectInput>
}

export type ProjectBuildUpdateWithWhereUniqueWithoutProjectInput = {
  where: Prisma.ProjectBuildWhereUniqueInput
  data: Prisma.XOR<Prisma.ProjectBuildUpdateWithoutProjectInput, Prisma.ProjectBuildUncheckedUpdateWithoutProjectInput>
}

export type ProjectBuildUpdateManyWithWhereWithoutProjectInput = {
  where: Prisma.ProjectBuildScalarWhereInput
  data: Prisma.XOR<Prisma.ProjectBuildUpdateManyMutationInput, Prisma.ProjectBuildUncheckedUpdateManyWithoutProjectInput>
}

export type ProjectBuildScalarWhereInput = {
  AND?: Prisma.ProjectBuildScalarWhereInput | Prisma.ProjectBuildScalarWhereInput[]
  OR?: Prisma.ProjectBuildScalarWhereInput[]
  NOT?: Prisma.ProjectBuildScalarWhereInput | Prisma.ProjectBuildScalarWhereInput[]
  id?: Prisma.StringFilter<"ProjectBuild"> | string
  status?: Prisma.EnumProjectBuildStatusFilter<"ProjectBuild"> | $Enums.ProjectBuildStatus
  projectId?: Prisma.StringFilter<"ProjectBuild"> | string
  createdAt?: Prisma.DateTimeFilter<"ProjectBuild"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"ProjectBuild"> | Date | string
}

export type ProjectBuildCreateManyProjectInput = {
  id?: string
  status: $Enums.ProjectBuildStatus
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProjectBuildUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProjectBuildStatusFieldUpdateOperationsInput | $Enums.ProjectBuildStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectBuildUncheckedUpdateWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProjectBuildStatusFieldUpdateOperationsInput | $Enums.ProjectBuildStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProjectBuildUncheckedUpdateManyWithoutProjectInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  status?: Prisma.EnumProjectBuildStatusFieldUpdateOperationsInput | $Enums.ProjectBuildStatus
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type ProjectBuildSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectBuild"]>

export type ProjectBuildSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectBuild"]>

export type ProjectBuildSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  status?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}, ExtArgs["result"]["projectBuild"]>

export type ProjectBuildSelectScalar = {
  id?: boolean
  status?: boolean
  projectId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProjectBuildOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "status" | "projectId" | "createdAt" | "updatedAt", ExtArgs["result"]["projectBuild"]>
export type ProjectBuildInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type ProjectBuildIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}
export type ProjectBuildIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  project?: boolean | Prisma.ProjectDefaultArgs<ExtArgs>
}

export type $ProjectBuildPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "ProjectBuild"
  objects: {
    project: Prisma.$ProjectPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    status: $Enums.ProjectBuildStatus
    projectId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["projectBuild"]>
  composites: {}
}

export type ProjectBuildGetPayload<S extends boolean | null | undefined | ProjectBuildDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload, S>

export type ProjectBuildCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProjectBuildFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProjectBuildCountAggregateInputType | true
  }

export interface ProjectBuildDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectBuild'], meta: { name: 'ProjectBuild' } }
  /**
   * Find zero or one ProjectBuild that matches the filter.
   * @param {ProjectBuildFindUniqueArgs} args - Arguments to find a ProjectBuild
   * @example
   * // Get one ProjectBuild
   * const projectBuild = await prisma.projectBuild.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProjectBuildFindUniqueArgs>(args: Prisma.SelectSubset<T, ProjectBuildFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProjectBuildClient<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one ProjectBuild that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProjectBuildFindUniqueOrThrowArgs} args - Arguments to find a ProjectBuild
   * @example
   * // Get one ProjectBuild
   * const projectBuild = await prisma.projectBuild.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProjectBuildFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProjectBuildFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectBuildClient<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectBuild that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectBuildFindFirstArgs} args - Arguments to find a ProjectBuild
   * @example
   * // Get one ProjectBuild
   * const projectBuild = await prisma.projectBuild.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProjectBuildFindFirstArgs>(args?: Prisma.SelectSubset<T, ProjectBuildFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProjectBuildClient<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first ProjectBuild that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectBuildFindFirstOrThrowArgs} args - Arguments to find a ProjectBuild
   * @example
   * // Get one ProjectBuild
   * const projectBuild = await prisma.projectBuild.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProjectBuildFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProjectBuildFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProjectBuildClient<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more ProjectBuilds that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectBuildFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all ProjectBuilds
   * const projectBuilds = await prisma.projectBuild.findMany()
   * 
   * // Get first 10 ProjectBuilds
   * const projectBuilds = await prisma.projectBuild.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const projectBuildWithIdOnly = await prisma.projectBuild.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProjectBuildFindManyArgs>(args?: Prisma.SelectSubset<T, ProjectBuildFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a ProjectBuild.
   * @param {ProjectBuildCreateArgs} args - Arguments to create a ProjectBuild.
   * @example
   * // Create one ProjectBuild
   * const ProjectBuild = await prisma.projectBuild.create({
   *   data: {
   *     // ... data to create a ProjectBuild
   *   }
   * })
   * 
   */
  create<T extends ProjectBuildCreateArgs>(args: Prisma.SelectSubset<T, ProjectBuildCreateArgs<ExtArgs>>): Prisma.Prisma__ProjectBuildClient<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many ProjectBuilds.
   * @param {ProjectBuildCreateManyArgs} args - Arguments to create many ProjectBuilds.
   * @example
   * // Create many ProjectBuilds
   * const projectBuild = await prisma.projectBuild.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProjectBuildCreateManyArgs>(args?: Prisma.SelectSubset<T, ProjectBuildCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many ProjectBuilds and returns the data saved in the database.
   * @param {ProjectBuildCreateManyAndReturnArgs} args - Arguments to create many ProjectBuilds.
   * @example
   * // Create many ProjectBuilds
   * const projectBuild = await prisma.projectBuild.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many ProjectBuilds and only return the `id`
   * const projectBuildWithIdOnly = await prisma.projectBuild.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProjectBuildCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProjectBuildCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a ProjectBuild.
   * @param {ProjectBuildDeleteArgs} args - Arguments to delete one ProjectBuild.
   * @example
   * // Delete one ProjectBuild
   * const ProjectBuild = await prisma.projectBuild.delete({
   *   where: {
   *     // ... filter to delete one ProjectBuild
   *   }
   * })
   * 
   */
  delete<T extends ProjectBuildDeleteArgs>(args: Prisma.SelectSubset<T, ProjectBuildDeleteArgs<ExtArgs>>): Prisma.Prisma__ProjectBuildClient<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one ProjectBuild.
   * @param {ProjectBuildUpdateArgs} args - Arguments to update one ProjectBuild.
   * @example
   * // Update one ProjectBuild
   * const projectBuild = await prisma.projectBuild.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProjectBuildUpdateArgs>(args: Prisma.SelectSubset<T, ProjectBuildUpdateArgs<ExtArgs>>): Prisma.Prisma__ProjectBuildClient<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more ProjectBuilds.
   * @param {ProjectBuildDeleteManyArgs} args - Arguments to filter ProjectBuilds to delete.
   * @example
   * // Delete a few ProjectBuilds
   * const { count } = await prisma.projectBuild.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProjectBuildDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProjectBuildDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectBuilds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectBuildUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many ProjectBuilds
   * const projectBuild = await prisma.projectBuild.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProjectBuildUpdateManyArgs>(args: Prisma.SelectSubset<T, ProjectBuildUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more ProjectBuilds and returns the data updated in the database.
   * @param {ProjectBuildUpdateManyAndReturnArgs} args - Arguments to update many ProjectBuilds.
   * @example
   * // Update many ProjectBuilds
   * const projectBuild = await prisma.projectBuild.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more ProjectBuilds and only return the `id`
   * const projectBuildWithIdOnly = await prisma.projectBuild.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProjectBuildUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProjectBuildUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one ProjectBuild.
   * @param {ProjectBuildUpsertArgs} args - Arguments to update or create a ProjectBuild.
   * @example
   * // Update or create a ProjectBuild
   * const projectBuild = await prisma.projectBuild.upsert({
   *   create: {
   *     // ... data to create a ProjectBuild
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the ProjectBuild we want to update
   *   }
   * })
   */
  upsert<T extends ProjectBuildUpsertArgs>(args: Prisma.SelectSubset<T, ProjectBuildUpsertArgs<ExtArgs>>): Prisma.Prisma__ProjectBuildClient<runtime.Types.Result.GetResult<Prisma.$ProjectBuildPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of ProjectBuilds.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectBuildCountArgs} args - Arguments to filter ProjectBuilds to count.
   * @example
   * // Count the number of ProjectBuilds
   * const count = await prisma.projectBuild.count({
   *   where: {
   *     // ... the filter for the ProjectBuilds we want to count
   *   }
   * })
  **/
  count<T extends ProjectBuildCountArgs>(
    args?: Prisma.Subset<T, ProjectBuildCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProjectBuildCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a ProjectBuild.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectBuildAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProjectBuildAggregateArgs>(args: Prisma.Subset<T, ProjectBuildAggregateArgs>): Prisma.PrismaPromise<GetProjectBuildAggregateType<T>>

  /**
   * Group by ProjectBuild.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProjectBuildGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProjectBuildGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProjectBuildGroupByArgs['orderBy'] }
      : { orderBy?: ProjectBuildGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProjectBuildGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectBuildGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the ProjectBuild model
 */
readonly fields: ProjectBuildFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for ProjectBuild.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProjectBuildClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  project<T extends Prisma.ProjectDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProjectDefaultArgs<ExtArgs>>): Prisma.Prisma__ProjectClient<runtime.Types.Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the ProjectBuild model
 */
export interface ProjectBuildFieldRefs {
  readonly id: Prisma.FieldRef<"ProjectBuild", 'String'>
  readonly status: Prisma.FieldRef<"ProjectBuild", 'ProjectBuildStatus'>
  readonly projectId: Prisma.FieldRef<"ProjectBuild", 'String'>
  readonly createdAt: Prisma.FieldRef<"ProjectBuild", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"ProjectBuild", 'DateTime'>
}
    

// Custom InputTypes
/**
 * ProjectBuild findUnique
 */
export type ProjectBuildFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * Filter, which ProjectBuild to fetch.
   */
  where: Prisma.ProjectBuildWhereUniqueInput
}

/**
 * ProjectBuild findUniqueOrThrow
 */
export type ProjectBuildFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * Filter, which ProjectBuild to fetch.
   */
  where: Prisma.ProjectBuildWhereUniqueInput
}

/**
 * ProjectBuild findFirst
 */
export type ProjectBuildFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * Filter, which ProjectBuild to fetch.
   */
  where?: Prisma.ProjectBuildWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectBuilds to fetch.
   */
  orderBy?: Prisma.ProjectBuildOrderByWithRelationInput | Prisma.ProjectBuildOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectBuilds.
   */
  cursor?: Prisma.ProjectBuildWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectBuilds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectBuilds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectBuilds.
   */
  distinct?: Prisma.ProjectBuildScalarFieldEnum | Prisma.ProjectBuildScalarFieldEnum[]
}

/**
 * ProjectBuild findFirstOrThrow
 */
export type ProjectBuildFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * Filter, which ProjectBuild to fetch.
   */
  where?: Prisma.ProjectBuildWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectBuilds to fetch.
   */
  orderBy?: Prisma.ProjectBuildOrderByWithRelationInput | Prisma.ProjectBuildOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for ProjectBuilds.
   */
  cursor?: Prisma.ProjectBuildWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectBuilds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectBuilds.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of ProjectBuilds.
   */
  distinct?: Prisma.ProjectBuildScalarFieldEnum | Prisma.ProjectBuildScalarFieldEnum[]
}

/**
 * ProjectBuild findMany
 */
export type ProjectBuildFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * Filter, which ProjectBuilds to fetch.
   */
  where?: Prisma.ProjectBuildWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of ProjectBuilds to fetch.
   */
  orderBy?: Prisma.ProjectBuildOrderByWithRelationInput | Prisma.ProjectBuildOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing ProjectBuilds.
   */
  cursor?: Prisma.ProjectBuildWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` ProjectBuilds from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` ProjectBuilds.
   */
  skip?: number
  distinct?: Prisma.ProjectBuildScalarFieldEnum | Prisma.ProjectBuildScalarFieldEnum[]
}

/**
 * ProjectBuild create
 */
export type ProjectBuildCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * The data needed to create a ProjectBuild.
   */
  data: Prisma.XOR<Prisma.ProjectBuildCreateInput, Prisma.ProjectBuildUncheckedCreateInput>
}

/**
 * ProjectBuild createMany
 */
export type ProjectBuildCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many ProjectBuilds.
   */
  data: Prisma.ProjectBuildCreateManyInput | Prisma.ProjectBuildCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * ProjectBuild createManyAndReturn
 */
export type ProjectBuildCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * The data used to create many ProjectBuilds.
   */
  data: Prisma.ProjectBuildCreateManyInput | Prisma.ProjectBuildCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectBuild update
 */
export type ProjectBuildUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * The data needed to update a ProjectBuild.
   */
  data: Prisma.XOR<Prisma.ProjectBuildUpdateInput, Prisma.ProjectBuildUncheckedUpdateInput>
  /**
   * Choose, which ProjectBuild to update.
   */
  where: Prisma.ProjectBuildWhereUniqueInput
}

/**
 * ProjectBuild updateMany
 */
export type ProjectBuildUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update ProjectBuilds.
   */
  data: Prisma.XOR<Prisma.ProjectBuildUpdateManyMutationInput, Prisma.ProjectBuildUncheckedUpdateManyInput>
  /**
   * Filter which ProjectBuilds to update
   */
  where?: Prisma.ProjectBuildWhereInput
  /**
   * Limit how many ProjectBuilds to update.
   */
  limit?: number
}

/**
 * ProjectBuild updateManyAndReturn
 */
export type ProjectBuildUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * The data used to update ProjectBuilds.
   */
  data: Prisma.XOR<Prisma.ProjectBuildUpdateManyMutationInput, Prisma.ProjectBuildUncheckedUpdateManyInput>
  /**
   * Filter which ProjectBuilds to update
   */
  where?: Prisma.ProjectBuildWhereInput
  /**
   * Limit how many ProjectBuilds to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * ProjectBuild upsert
 */
export type ProjectBuildUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * The filter to search for the ProjectBuild to update in case it exists.
   */
  where: Prisma.ProjectBuildWhereUniqueInput
  /**
   * In case the ProjectBuild found by the `where` argument doesn't exist, create a new ProjectBuild with this data.
   */
  create: Prisma.XOR<Prisma.ProjectBuildCreateInput, Prisma.ProjectBuildUncheckedCreateInput>
  /**
   * In case the ProjectBuild was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProjectBuildUpdateInput, Prisma.ProjectBuildUncheckedUpdateInput>
}

/**
 * ProjectBuild delete
 */
export type ProjectBuildDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
  /**
   * Filter which ProjectBuild to delete.
   */
  where: Prisma.ProjectBuildWhereUniqueInput
}

/**
 * ProjectBuild deleteMany
 */
export type ProjectBuildDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which ProjectBuilds to delete
   */
  where?: Prisma.ProjectBuildWhereInput
  /**
   * Limit how many ProjectBuilds to delete.
   */
  limit?: number
}

/**
 * ProjectBuild without action
 */
export type ProjectBuildDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProjectBuild
   */
  select?: Prisma.ProjectBuildSelect<ExtArgs> | null
  /**
   * Omit specific fields from the ProjectBuild
   */
  omit?: Prisma.ProjectBuildOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProjectBuildInclude<ExtArgs> | null
}
